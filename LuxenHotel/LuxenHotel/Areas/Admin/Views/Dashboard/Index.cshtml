@using System.Text.Json
@using LuxenHotel.Models.Entities.Orders
@model LuxenHotel.Areas.Admin.Controllers.DashboardViewModel

@section Styles
{
    @Html.LibStyle("vis-timeline/vis-timeline.bundle.css")
}

@section Scripts {
    <!-- JavaScript Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    @Html.JsScript("dashboard.js")
    @Html.LibScript("vis-timeline/vis-timeline.bundle.js")

    <script>
        // Data preparation
        const accommodationNames = @Html.Raw(JsonSerializer.Serialize(Model.AccommodationOrders.Select(a => a.Accommodation.Name).ToArray()));
        const accommodationRevenues = @Html.Raw(JsonSerializer.Serialize(Model.AccommodationOrders.Select(a => (double)a.Revenue).ToArray()));

        // Collect order statuses for pie chart
        const allOrders = @Html.Raw(JsonSerializer.Serialize(
                                                                                                                                                                                                                                            Model.AccommodationOrders
                                                                                                                                                                                                                                                                            .SelectMany(a => a.Orders)
                                                                                                                                                                                                                                                                            .GroupBy(o => o.Status)
                                                                                                                                                                                                                                                                            .Select(g => new { Status = g.Key.ToString(), Count = g.Count() })
                    .ToArray()
                    ));

    // Timeline data
    const timelineOrders = @Html.Raw(JsonSerializer.Serialize(
                                                                                                                                                                                                                                                        Model.AccommodationOrders.SelectMany(a => a.Orders)
                                                                                                                                                                                                                                                                                        .Select(o => new
                                                                                                                                                    {
                                                                                                                                                        id = o.Id,
                                                                                                                                                                                                                                                                                                        content = o.OrderCode,
                                                                                                                                                                                                                                                                                                        start = o.CheckInDate.ToString("yyyy-MM-dd"),
                                                                                                                                                        end = o.CheckOutDate.ToString("yyyy-MM-dd"),
                                                                                                                                                                                                                                                                                                        title = $"{o.OrderCode} - {o.CustomerName} - {o.Status}",
                                                                                                                                                                                                                                                                                                        group = o.AccommodationId,
                                                                                                                                                                                                                                                                                                        className = $"status-{o.Status.ToString().ToLower()}"
                                                                                                                                                    })
                .ToArray()
                ));

    const timelineGroups = @Html.Raw(JsonSerializer.Serialize(
                                                                                                                                                                                                                                                        Model.AccommodationOrders.Select(a => new
                                                                                                                                    {
                                                                                                                                        id = a.Accommodation.Id,
                                                                                                                                                                                                                                                                        content = a.Accommodation.Name
                                                                                                                                    }).ToArray()
                ));

    // Charts initialization
    document.addEventListener('DOMContentLoaded', function () {
        // Revenue by Accommodation Chart
        const revenueCtx = document.getElementById('revenueByAccommodationChart').getContext('2d');
        new Chart(revenueCtx, {
            type: 'bar',
            data: {
                labels: accommodationNames,
                datasets: [{
                    label: 'Revenue',
                    data: accommodationRevenues,
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function (value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return 'Revenue: $' + context.raw.toLocaleString();
                            }
                        }
                    }
                }
            }
        });

            // Order Status Chart
            const statusCtx = document.getElementById('orderStatusChart').getContext('2d');
            new Chart(statusCtx, {
                type: 'pie',
                data: {
                    labels: allOrders.map(item => item.Status),
                    datasets: [{
                        data: allOrders.map(item => item.Count),
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.5)',  // Completed
                            'rgba(153, 102, 255, 0.5)', // Created
                            'rgba(255, 159, 64, 0.5)',  // Pending
                            'rgba(255, 99, 132, 0.5)'   // Cancelled
                        ],
                        borderColor: [
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)',
                            'rgba(255, 99, 132, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${context.label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });

            // Timeline
            const container = document.getElementById('ordersTimeline');

            const groups = new vis.DataSet(timelineGroups);
            const items = new vis.DataSet(timelineOrders);

            const timeline = new vis.Timeline(container, items, groups, {
                stack: true,
                stackSubgroups: true,
                horizontalScroll: true,
                zoomKey: 'ctrlKey',
                min: new Date().setMonth(new Date().getMonth() - 1),
                max: new Date().setMonth(new Date().getMonth() + 2)
            });

            // Add CSS for timeline status styles
            const style = document.createElement('style');
            style.textContent = `
                        .vis-item.status-completed { background-color: rgba(75, 192, 192, 0.7); border-color: rgba(75, 192, 192, 1); }
                        .vis-item.status-created { background-color: rgba(153, 102, 255, 0.7); border-color: rgba(153, 102, 255, 1); }
                        .vis-item.status-pending { background-color: rgba(255, 159, 64, 0.7); border-color: rgba(255, 159, 64, 1); }
                        .vis-item.status-cancelled { background-color: rgba(255, 99, 132, 0.7); border-color: rgba(255, 99, 132, 1); }
                    `;
            document.head.appendChild(style);
        });
    </script>
}

<div class="row gx-5 gx-xl-10 mb-xl-10">
    <!--Earnings Summary (Partial)-->
    <div class="col-md-6 col-lg-6 col-xl-6 col-xxl-3 mb-10">
        @Html.Partial("Partial/_EarningsSummary", Model)
    </div>

    <div class="col-md-6 col-lg-6 col-xl-6 col-xxl-9 mb-10">
        <div class="card card-flush h-xl-100">
            <!--begin::Card header-->
            <div class="card-header pt-7">
                <h3 class="card-title align-items-start flex-column fw-bold text-gray-800">
                    Top Accommodations by Revenue
                </h3>
                <!--end::Title-->
            </div>
            <!--end::Card header-->

            <!--begin::Card body-->
            <div class="card-body pt-2">
                <!--begin::Table-->
                <table class="table align-middle table-row-dashed fs-6 gy-3" id="kt_table_widget_4_table">
                    <!--begin::Table head-->
                    <thead>
                        <tr class="text-start text-gray-500 fw-bold fs-7 text-uppercase gs-0">
                            <th class="min-w-100px">Accommodation</th>
                            <th class="text-center min-w-100px">Total Orders</th>
                            <th class="text-end min-w-125px">Revenue</th>
                        </tr>
                    </thead>
                    <!--end::Table head-->

                    <!--begin::Table body-->
                    <tbody class="fw-bold text-gray-600">

                        <!-- Main table rows -->
                        @foreach (var accommodationOrder in Model.AccommodationOrders)
                        {
                            <tr>
                                <td>
                                    @accommodationOrder.Accommodation.Name
                                </td>
                                <td class="text-center text-gray-800">
                                    @accommodationOrder.TotalOrders
                                </td>
                                <td class="text-end">
                                    <span class="text-gray-800 fw-bolder">
                                        @accommodationOrder.Revenue.ToString("N0") <i class="fa-solid fa-dong-sign"></i>
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <!--end::Table body-->
                </table>
                <!--end::Table-->
            </div>
            <!--end::Card body-->
        </div>
    </div>
</div>

<div class="card h-md-100">
    <div class="card-header align-items-center border-0">
        <h3 class="fw-bold text-gray-900 m-0">Recent Orders</h3>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table align-middle table-row-dashed fs-6 gy-3">
                <thead>
                    <tr class="text-start text-gray-500 fw-bold fs-7 text-uppercase gs-0">
                        <th>Order Code</th>
                        <th>Created</th>
                        <th>Customer</th>
                        <th class="text-center">Total</th>
                        <th class="text-center">Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model.RecentOrders)
                    {
                        <tr>
                            <td class="text-gray-800 text-hover-primary fs-5 fw-bold mb-1">
                                @order.Order.OrderCode
                            </td>
                            <td>
                                <div>@order.TimeAgo</div>
                                <small class="text-muted">@order.Order.CreatedAt.ToString("g")</small>
                            </td>
                            <td>
                                <div class="d-flex">
                                    <div>
                                        @if (!string.IsNullOrEmpty(order.UserName))
                                        {
                                            <span class="text-gray-800 fs-5 fw-bold mb-1">@order.UserName</span>
                                        }
                                        else if (order.Order.User != null)
                                        {
                                            <span class="text-gray-800 fs-5 fw-bold mb-1">@order.Order.User.UserName</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">N/A</span>
                                        }
                                        @if (!string.IsNullOrEmpty(order.Order.CustomerEmail))
                                        {
                                            <div class="text-muted fs-7 fw-bold">@order.Order.CustomerEmail</div>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td class="fw-bold text-center">@order.Order.TotalPrice.ToString("N0") <i
                                    class="fa-solid fa-dong-sign"></i>
                            </td>
                            <td class="text-center">
                                @{
                                    string badgeClass = order.Order.Status switch
                                    {
                                        OrderStatus.Completed => "badge-light-success",
                                        OrderStatus.Cancelled => "badge-light-danger",
                                        OrderStatus.Created => "badge-light-primary",
                                        _ => "badge-light-secondary"
                                    };
                                }
                                <span class="badge @badgeClass">@order.Order.Status</span>
                            </td>
                            <td>
                                <a href="admin/orders/@order.Order.OrderCode" class="btn btn-sm btn-outline-info">
                                    View Details
                                </a>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
